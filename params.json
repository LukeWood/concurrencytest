{"name":"Concurrencytest","tagline":"Python testtools extension for running unittest suites concurrently.","body":"concurrencytest\r\n===============\r\n\r\n![testing goats](https://raw.github.com/cgoldberg/concurrencytest/master/testing-goats.png \"testing goats\")\r\n\r\nPython testtools extension for running unittest suites concurrently.\r\n\r\n----\r\n\r\nInstall from PyPI:\r\n```\r\npip install concurrencytest\r\n```\r\n\r\n----\r\n\r\nRequires:\r\n\r\n * [testtools](https://pypi.python.org/pypi/testtools) : `pip install testtools`\r\n * [python-subunit](https://pypi.python.org/pypi/python-subunit) : `pip install python-subunit`\r\n\r\n----\r\n\r\nExample:\r\n\r\n```python\r\nimport time\r\nimport unittest\r\n\r\nfrom concurrencytest import ConcurrentTestSuite, fork_for_tests\r\n\r\n\r\nclass SampleTestCase(unittest.TestCase):\r\n    \"\"\"Dummy tests that sleep for demo.\"\"\"\r\n\r\n    def test_me_1(self):\r\n        time.sleep(0.5)\r\n\r\n    def test_me_2(self):\r\n        time.sleep(0.5)\r\n\r\n    def test_me_3(self):\r\n        time.sleep(0.5)\r\n\r\n    def test_me_4(self):\r\n        time.sleep(0.5)\r\n\r\n\r\n# Load tests from SampleTestCase defined above\r\nsuite = unittest.TestLoader().loadTestsFromTestCase(SampleTestCase)\r\nrunner = unittest.TextTestRunner()\r\n\r\n# Run tests sequentially\r\nrunner.run(suite)\r\n\r\n# Run same tests across 4 processes\r\nconcurrent_suite = ConcurrentTestSuite(suite, fork_for_tests(4))\r\nrunner.run(concurrent_suite)\r\n```\r\nOutput:\r\n\r\n```\r\n....\r\n----------------------------------------------------------------------\r\nRan 4 tests in 2.003s\r\n\r\nOK\r\n....\r\n----------------------------------------------------------------------\r\nRan 4 tests in 0.504s\r\n\r\nOK\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}